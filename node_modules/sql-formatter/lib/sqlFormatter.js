"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportedDialects = exports.formatters = exports.format = void 0;

var _bigquery = _interopRequireDefault(require("./languages/bigquery.formatter"));

var _db = _interopRequireDefault(require("./languages/db2.formatter"));

var _hive = _interopRequireDefault(require("./languages/hive.formatter"));

var _mariadb = _interopRequireDefault(require("./languages/mariadb.formatter"));

var _mysql = _interopRequireDefault(require("./languages/mysql.formatter"));

var _n1ql = _interopRequireDefault(require("./languages/n1ql.formatter"));

var _plsql = _interopRequireDefault(require("./languages/plsql.formatter"));

var _postgresql = _interopRequireDefault(require("./languages/postgresql.formatter"));

var _redshift = _interopRequireDefault(require("./languages/redshift.formatter"));

var _sparksql = _interopRequireDefault(require("./languages/sparksql.formatter"));

var _standardsql = _interopRequireDefault(require("./languages/standardsql.formatter"));

var _tsql = _interopRequireDefault(require("./languages/tsql.formatter"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var formatters = {
  bigquery: _bigquery["default"],
  db2: _db["default"],
  hive: _hive["default"],
  mariadb: _mariadb["default"],
  mysql: _mysql["default"],
  n1ql: _n1ql["default"],
  plsql: _plsql["default"],
  postgresql: _postgresql["default"],
  redshift: _redshift["default"],
  spark: _sparksql["default"],
  sql: _standardsql["default"],
  tsql: _tsql["default"]
};
exports.formatters = formatters;
var supportedDialects = Object.keys(formatters);
exports.supportedDialects = supportedDialects;
var defaultOptions = {
  language: 'sql',
  indent: '  ',
  keywordCase: 'preserve',
  indentStyle: 'standard',
  multilineLists: 'always',
  logicalOperatorNewline: 'before',
  aliasAs: 'preserve',
  tabulateAlias: false,
  commaPosition: 'after',
  newlineBeforeOpenParen: true,
  newlineBeforeCloseParen: true,
  expressionWidth: 50,
  linesBetweenQueries: 1,
  denseOperators: false,
  newlineBeforeSemicolon: false
};
/**
 * Format whitespace in a query to make it easier to read.
 *
 * @param {string} query - input SQL query string
 * @param {FormatOptions} cfg Configuration options (see docs in README)
 * @return {string} formatted query
 */

var format = function format(query) {
  var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof query !== 'string') {
    throw new Error('Invalid query argument. Expected string, instead got ' + _typeof(query));
  }

  var options = validateConfig(_objectSpread(_objectSpread({}, defaultOptions), cfg));
  var Formatter = formatters[options.language];
  return new Formatter(options).format(query);
};

exports.format = format;

function validateConfig(cfg) {
  if (!supportedDialects.includes(cfg.language)) {
    throw new Error("Unsupported SQL dialect: ".concat(cfg.language));
  }

  if ((0, _utils.isNumber)(cfg.multilineLists) && cfg.multilineLists <= 0) {
    throw new Error('multilineLists config must be a positive number.');
  }

  if (cfg.expressionWidth <= 0) {
    throw new Error("expressionWidth config must be positive number. Received ".concat(cfg.expressionWidth, " instead."));
  }

  if (cfg.commaPosition === 'before' && cfg.indent === '\t') {
    throw new Error('commaPosition: before does not work when tabs are used for indentation.');
  }

  return cfg;
}
//# sourceMappingURL=sqlFormatter.js.map