import BigQueryFormatter from './languages/bigquery.formatter';
import Db2Formatter from './languages/db2.formatter';
import HiveFormatter from './languages/hive.formatter';
import MariaDbFormatter from './languages/mariadb.formatter';
import MySqlFormatter from './languages/mysql.formatter';
import N1qlFormatter from './languages/n1ql.formatter';
import PlSqlFormatter from './languages/plsql.formatter';
import PostgreSqlFormatter from './languages/postgresql.formatter';
import RedshiftFormatter from './languages/redshift.formatter';
import SparkSqlFormatter from './languages/sparksql.formatter';
import StandardSqlFormatter from './languages/standardsql.formatter';
import TSqlFormatter from './languages/tsql.formatter';
import { FormatOptions } from './types';
export declare const formatters: {
    bigquery: typeof BigQueryFormatter;
    db2: typeof Db2Formatter;
    hive: typeof HiveFormatter;
    mariadb: typeof MariaDbFormatter;
    mysql: typeof MySqlFormatter;
    n1ql: typeof N1qlFormatter;
    plsql: typeof PlSqlFormatter;
    postgresql: typeof PostgreSqlFormatter;
    redshift: typeof RedshiftFormatter;
    spark: typeof SparkSqlFormatter;
    sql: typeof StandardSqlFormatter;
    tsql: typeof TSqlFormatter;
};
export declare type SqlLanguage = keyof typeof formatters;
export declare const supportedDialects: string[];
export declare type FormatFnOptions = FormatOptions & {
    language: SqlLanguage;
};
/**
 * Format whitespace in a query to make it easier to read.
 *
 * @param {string} query - input SQL query string
 * @param {FormatOptions} cfg Configuration options (see docs in README)
 * @return {string} formatted query
 */
export declare const format: (query: string, cfg?: Partial<FormatFnOptions>) => string;
export declare type FormatFn = typeof format;
