{"version":3,"sources":["../src/utils.ts"],"names":["dedupe","arr","Set","trimSpacesEnd","str","replace","last","length","isEmpty","Array","isArray","escapeRegExp","string","sortByLengthDesc","strings","sort","a","b","localeCompare","maxLength","reduce","max","cur","Math","isNumber","value"],"mappings":";;;;;;;;;;;;;;;;;;;AAAO,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD;AAAA,4BAAuB,IAAIC,GAAJ,CAAQD,GAAR,CAAvB;AAAA,CAAf,C,CAEP;;;;;AACO,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD;AAAA,SAAiBA,GAAG,CAACC,OAAJ,CAAY,SAAZ,EAAwB,EAAxB,CAAjB;AAAA,CAAtB,C,CAEP;;;;;AACO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAgBL,GAAhB;AAAA,SAA6BA,GAAG,CAACA,GAAG,CAACM,MAAJ,GAAa,CAAd,CAAhC;AAAA,CAAb,C,CAEP;;;;;AACO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACP,GAAD;AAAA,SAAgB,CAACQ,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAD,IAAuBA,GAAG,CAACM,MAAJ,KAAe,CAAtD;AAAA,CAAhB,C,CAEP;;;;;AACO,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAoBA,MAAM,CAACP,OAAP,CAAe,0BAAf,EAAuC,MAAvC,CAApB;AAAA,CAArB,C,CAEP;AACA;;;;;AACO,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD;AAAA,SAC9BA,OAAO,CAACC,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACV,MAAF,GAAWS,CAAC,CAACT,MAAb,IAAuBS,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAAjC;AAAA,GAAb,CAD8B;AAAA,CAAzB;AAGP;;;;;AACO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACL,OAAD;AAAA,SACvBA,OAAO,CAACM,MAAR,CAAe,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcC,IAAI,CAACF,GAAL,CAASA,GAAT,EAAcC,GAAG,CAACf,MAAlB,CAAd;AAAA,GAAf,EAAwD,CAAxD,CADuB;AAAA,CAAlB;;;;AAGA,IAAMiB,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAiC,OAAOA,KAAP,KAAiB,QAAlD;AAAA,CAAjB","sourcesContent":["export const dedupe = (arr: string[]) => [...new Set(arr)];\n\n// Only removes spaces, not newlines\nexport const trimSpacesEnd = (str: string) => str.replace(/[ \\t]+$/u, '');\n\n// Last element from array\nexport const last = <T extends any>(arr: T[]) => arr[arr.length - 1];\n\n// True array is empty, or it's not an array at all\nexport const isEmpty = (arr: any[]) => !Array.isArray(arr) || arr.length === 0;\n\n// Escapes regex special chars\nexport const escapeRegExp = (string: string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings: string[]) =>\n  strings.sort((a, b) => b.length - a.length || a.localeCompare(b));\n\n/** Get length of longest string in list of strings */\nexport const maxLength = (strings: string[]) =>\n  strings.reduce((max, cur) => Math.max(max, cur.length), 0);\n\nexport const isNumber = (value: any): value is number => typeof value === 'number';\n"],"file":"utils.js"}