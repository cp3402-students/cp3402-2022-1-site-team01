"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _token = require("./token");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var AsTokenFactory = /*#__PURE__*/function () {
  function AsTokenFactory(keywordCase) {
    var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, AsTokenFactory);

    this.keywordCase = keywordCase;

    _defineProperty(this, "detectedCase", void 0);

    this.detectedCase = this.autoDetectCase(tokens);
  }

  _createClass(AsTokenFactory, [{
    key: "autoDetectCase",
    value: function autoDetectCase(tokens) {
      var asTokens = tokens.filter(_token.isToken.AS);
      var upperAsTokens = asTokens.filter(function (_ref) {
        var value = _ref.value;
        return value === 'AS';
      });
      return upperAsTokens.length > asTokens.length / 2 ? 'upper' : 'lower';
    }
    /** Returns AS token with either upper- or lowercase text */

  }, {
    key: "token",
    value: function token() {
      return {
        type: _token.TokenType.RESERVED_KEYWORD,
        value: this.asTokenValue()
      };
    }
  }, {
    key: "asTokenValue",
    value: function asTokenValue() {
      var keywordCase = this.keywordCase === 'preserve' ? this.detectedCase : this.keywordCase;
      return keywordCase === 'upper' ? 'AS' : 'as';
    }
  }]);

  return AsTokenFactory;
}();

exports["default"] = AsTokenFactory;
module.exports = exports.default;
//# sourceMappingURL=AsTokenFactory.js.map