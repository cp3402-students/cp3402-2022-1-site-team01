{"version":3,"sources":["../../src/core/Params.ts"],"names":["Params","params","index","key","value"],"mappings":";;;;;;;;;;;;;;;AAIA;AACA;AACA;IACqBA,M;AACnB;AACF;AACA;AAIE,kBAAYC,MAAZ,EAAuD;AAAA;;AAAA;;AAAA;;AACrD,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;;;WACE,mBAAmC;AAAA,UAA7BC,GAA6B,QAA7BA,GAA6B;AAAA,UAAxBC,KAAwB,QAAxBA,KAAwB;;AACjC,UAAI,CAAC,KAAKH,MAAV,EAAkB;AAChB,eAAOG,KAAP;AACD;;AAED,UAAID,GAAJ,EAAS;AACP,eAAQ,KAAKF,MAAN,CAA4BE,GAA5B,CAAP;AACD;;AACD,aAAQ,KAAKF,MAAN,CAA0B,KAAKC,KAAL,EAA1B,CAAP;AACD","sourcesContent":["import type { Token } from './token';\n\nexport type ParamItems = { [k: string]: string };\n\n/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n  /**\n   * @param {ParamItems} params\n   */\n  params: ParamItems | string[] | undefined;\n  index: number;\n\n  constructor(params: ParamItems | string[] | undefined) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   * @param {Token} token\n   * @return {string} param or token.value when params are missing\n   */\n  get({ key, value }: Token): string {\n    if (!this.params) {\n      return value;\n    }\n\n    if (key) {\n      return (this.params as ParamItems)[key];\n    }\n    return (this.params as string[])[this.index++];\n  }\n}\n"],"file":"Params.js"}