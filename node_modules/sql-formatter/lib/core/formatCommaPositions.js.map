{"version":3,"sources":["../../src/core/formatCommaPositions.ts"],"names":["formatCommaPositions","query","cfg","groupCommaDelimitedLines","split","flatMap","commaLines","length","commaPosition","formatTabular","formatBefore","Error","join","lines","groups","i","group","match","push","maxLineLength","trimTrailingCommas","map","line","repeat","WHITESPACE_REGEX","whitespace","removeLastIndent","indent","replace","trimStart","RegExp"],"mappings":"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","sourcesContent":["import { FormatOptions } from '../types';\nimport { maxLength } from '../utils';\nimport { WHITESPACE_REGEX } from './Tokenizer';\n\n/**\n * Handles comma placement - either before, after or tabulated\n */\nexport default function formatCommaPositions(query: string, cfg: FormatOptions): string {\n  return groupCommaDelimitedLines(query.split('\\n'))\n    .flatMap(commaLines => {\n      if (commaLines.length === 1) {\n        return commaLines;\n      } else if (cfg.commaPosition === 'tabular') {\n        return formatTabular(commaLines);\n      } else if (cfg.commaPosition === 'before') {\n        return formatBefore(commaLines, cfg);\n      } else {\n        throw new Error(`Unexpected commaPosition: ${cfg.commaPosition}`);\n      }\n    })\n    .join('\\n');\n}\n\n/**\n * Given lines like this:\n *\n *     [\n *       'SELECT',\n *       '  foo,',\n *       '  bar,',\n *       '  baz',\n *       'FROM'\n *     ]\n *\n * Returns groups like this:\n *\n *     [\n *       ['SELECT'],\n *       ['  foo,', '  bar,', '  baz'],\n *       ['FROM']\n *     ]\n */\nfunction groupCommaDelimitedLines(lines: string[]): string[][] {\n  const groups: string[][] = [];\n  for (let i = 0; i < lines.length; i++) {\n    const group = [lines[i]];\n    // when line ends with comma,\n    // gather together all following lines that also end with comma,\n    // plus one (which doesn't end with comma)\n    while (lines[i].match(/.*,$/)) {\n      i++;\n      group.push(lines[i]);\n    }\n    groups.push(group);\n  }\n  return groups;\n}\n\n// makes all lines the same length by appending spaces before comma\nfunction formatTabular(commaLines: string[]): string[] {\n  const maxLineLength = maxLength(commaLines);\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === commaLines.length - 1) {\n      return line; // do not add comma for last item\n    }\n    return line + ' '.repeat(maxLineLength - line.length - 1) + ',';\n  });\n}\n\nfunction formatBefore(commaLines: string[], cfg: FormatOptions): string[] {\n  return trimTrailingCommas(commaLines).map((line, i) => {\n    if (i === 0) {\n      return line; // do not add comma for first item\n    }\n    const [whitespace] = line.match(WHITESPACE_REGEX) || [''];\n    return (\n      removeLastIndent(whitespace, cfg.indent) +\n      cfg.indent.replace(/ {2}$/, ', ') + // add comma to the end of last indent\n      line.trimStart()\n    );\n  });\n}\n\nfunction removeLastIndent(whitespace: string, indent: string): string {\n  return whitespace.replace(new RegExp(indent + '$'), '');\n}\n\nfunction trimTrailingCommas(lines: string[]): string[] {\n  return lines.map(line => line.replace(/,$/, ''));\n}\n"],"file":"formatCommaPositions.js"}