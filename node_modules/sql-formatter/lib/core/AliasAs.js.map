{"version":3,"sources":["../../src/core/AliasAs.ts"],"names":["AliasAs","aliasAs","formatter","token","isMissingTableAlias","isMissingSelectColumnAlias","type","TokenType","WORD","lookBehind","value","prevToken","nextToken","lookAhead","isWithinSelect","isToken","END","NUMBER","isEdgeCaseCTE","isEdgeCaseCreateTable","isMissingTypeCastAs","CAST","getPreviousReservedToken","AS","RESERVED_KEYWORD","WITH","TABLE","endsWith","isRemovableNonSelectAs","n","tokenLookBehind","tokenLookAhead"],"mappings":"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","sourcesContent":["import { AliasMode } from '../types';\nimport { isCommand, isToken, Token, TokenType } from './token';\n\nexport interface TokenStream {\n  isWithinSelect(): boolean;\n  getPreviousReservedToken(): Token;\n  tokenLookBehind(n?: number): Token;\n  tokenLookAhead(n?: number): Token;\n}\n\n/** Decides addition and removal of AS tokens */\nexport default class AliasAs {\n  constructor(private aliasAs: AliasMode, private formatter: TokenStream) {}\n\n  /** True when AS keyword should be added *before* current token */\n  public shouldAddBefore(token: Token): boolean {\n    return this.isMissingTableAlias(token) || this.isMissingSelectColumnAlias(token);\n  }\n\n  // if table alias is missing and should be added\n  private isMissingTableAlias(token: Token): boolean {\n    return (\n      this.aliasAs === 'always' && token.type === TokenType.WORD && this.lookBehind().value === ')'\n    );\n  }\n\n  // if select column alias is missing and should be added\n  private isMissingSelectColumnAlias(token: Token): boolean {\n    const prevToken = this.lookBehind();\n    const nextToken = this.lookAhead();\n    return (\n      (this.aliasAs === 'always' || this.aliasAs === 'select') &&\n      this.formatter.isWithinSelect() &&\n      token.type === TokenType.WORD &&\n      (isToken.END(prevToken) ||\n        ((prevToken.type === TokenType.WORD || prevToken.type === TokenType.NUMBER) &&\n          (nextToken.value === ',' || isCommand(nextToken))))\n    );\n  }\n\n  /** True when AS keyword should be added *after* current token */\n  public shouldAddAfter(): boolean {\n    return this.isEdgeCaseCTE() || this.isEdgeCaseCreateTable() || this.isMissingTypeCastAs();\n  }\n\n  // checks for CAST(«expression» [AS] type)\n  private isMissingTypeCastAs(): boolean {\n    return (\n      this.aliasAs === 'never' &&\n      this.formatter.isWithinSelect() &&\n      isToken.CAST(this.formatter.getPreviousReservedToken()) &&\n      isToken.AS(this.lookAhead()) &&\n      (this.lookAhead(2).type === TokenType.WORD ||\n        this.lookAhead(2).type === TokenType.RESERVED_KEYWORD) &&\n      this.lookAhead(3).value === ')'\n    );\n  }\n\n  // checks for WITH `table` [AS] (\n  private isEdgeCaseCTE(): boolean {\n    const nextToken = this.lookAhead();\n    return (\n      this.aliasAs === 'never' &&\n      isToken.WITH(this.lookBehind()) &&\n      (nextToken.value === '(' || (isToken.AS(nextToken) && this.lookAhead(2).value === '('))\n    );\n  }\n\n  // checks for CREATE TABLE `table` [AS] WITH (\n  private isEdgeCaseCreateTable(): boolean {\n    const prevToken = this.lookBehind();\n    const nextToken = this.lookAhead();\n    return (\n      this.aliasAs === 'never' &&\n      (isToken.TABLE(prevToken) || prevToken.value.endsWith('TABLE')) &&\n      (isToken.WITH(nextToken) || (isToken.AS(nextToken) && isToken.WITH(this.lookAhead(2))))\n    );\n  }\n\n  /* True when the current AS token should be discarded */\n  public shouldRemove(): boolean {\n    return this.aliasAs === 'never' || (this.aliasAs === 'select' && this.isRemovableNonSelectAs());\n  }\n\n  private isRemovableNonSelectAs(): boolean {\n    return (\n      this.lookBehind().value === ')' && // ) [AS] alias but not SELECT (a) [AS] alpha\n      !this.formatter.isWithinSelect() &&\n      this.lookAhead().value !== '(' // skip WITH foo [AS] ( ...\n    );\n  }\n\n  private lookBehind(n?: number): Token {\n    return this.formatter.tokenLookBehind(n);\n  }\n\n  private lookAhead(n?: number): Token {\n    return this.formatter.tokenLookAhead(n);\n  }\n}\n"],"file":"AliasAs.js"}