{"version":3,"sources":["../../src/core/Formatter.ts"],"names":["TABULAR_INDENT","repeat","Formatter","cfg","EOF_TOKEN","indentation","Indentation","isTabularStyle","indent","inlineBlock","InlineBlock","expressionWidth","aliasAs","AliasAs","params","Params","asTokenFactory","AsTokenFactory","keywordCase","Error","token","query","tokens","tokenizer","tokenize","formattedQuery","getFormattedQueryFromTokens","finalQuery","postFormat","replace","trimEnd","tabulateAlias","commaPosition","index","length","tokenOverride","previousReservedToken","type","TokenType","RESERVED_KEYWORD","RESERVED_JOIN_CONDITION","indentStyle","RESERVED_COMMAND","previousCommandToken","LINE_COMMENT","formatLineComment","BLOCK_COMMENT","formatBlockComment","currentNewline","checkNewline","formatCommand","RESERVED_BINARY_COMMAND","formatBinaryCommand","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","formatJoinCondition","RESERVED_LOGICAL_OPERATOR","formatLogicalOperator","formatKeyword","BLOCK_START","formatBlockStart","BLOCK_END","formatBlockEnd","PLACEHOLDER","formatPlaceholder","OPERATOR","formatOperator","formatWord","shouldAddBefore","formatWithSpaces","shouldAddAfter","nextTokens","tokensUntilNextCommandOrQueryEnd","isWithinSelect","some","isToken","CASE","multilineLists","inlineWidth","countClauses","tokensString","map","value","join","whitespaceBefore","count","openBlocks","tail","slice","findIndex","undefined","addNewline","show","indentComment","comment","getIndent","decreaseTopLevel","tokenLookAhead","increaseTopLevel","equalizeWhitespace","isJoin","test","AS","shouldRemove","formatComma","formatQuerySeparator","includes","formatWithoutSpaces","denseOperators","tokenLookBehind","AND","BETWEEN","logicalOperatorNewline","string","preserveWhitespaceFor","newlineBeforeOpenParen","beginIfPossible","isActive","increaseBlockLevel","end","END","decreaseBlockLevel","getSingleIndent","newlineBeforeCloseParen","get","LIMIT","getPreviousReservedToken","addSpace","before","after","resetIndentation","newlineBeforeSemicolon","linesBetweenQueries","toUpperCase","toLowerCase","endsWith","SELECT","n"],"mappings":"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","sourcesContent":["import Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\nimport { trimSpacesEnd } from '../utils';\nimport { isReserved, isCommand, isToken, Token, TokenType, EOF_TOKEN } from './token';\nimport Tokenizer from './Tokenizer';\nimport { FormatOptions } from '../types';\nimport formatCommaPositions from './formatCommaPositions';\nimport formatAliasPositions from './formatAliasPositions';\nimport { toTabularToken, replaceTabularPlaceholders } from './tabularStyle';\nimport AliasAs from './AliasAs';\nimport AsTokenFactory from './AsTokenFactory';\n\nconst TABULAR_INDENT = ' '.repeat(10);\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n  private cfg: FormatOptions;\n  private indentation: Indentation;\n  private inlineBlock: InlineBlock;\n  private aliasAs: AliasAs;\n  private params: Params;\n  private asTokenFactory: AsTokenFactory;\n\n  private currentNewline = true;\n  private previousReservedToken: Token = EOF_TOKEN;\n  private previousCommandToken: Token = EOF_TOKEN;\n  protected tokens: Token[] = [];\n  protected index = -1;\n\n  constructor(cfg: FormatOptions) {\n    this.cfg = cfg;\n    this.indentation = new Indentation(this.isTabularStyle() ? TABULAR_INDENT : this.cfg.indent);\n    this.inlineBlock = new InlineBlock(this.cfg.expressionWidth);\n    this.aliasAs = new AliasAs(this.cfg.aliasAs, this);\n    this.params = new Params(this.cfg.params);\n    this.asTokenFactory = new AsTokenFactory(this.cfg.keywordCase);\n  }\n\n  /**\n   * SQL Tokenizer for this formatter, provided by subclasses.\n   */\n  protected tokenizer(): Tokenizer {\n    throw new Error('tokenizer() not implemented by subclass');\n  }\n\n  /**\n   * Reprocess and modify a token based on parsed context.\n   * Subclasses can override this to modify tokens during formatting.\n   * @param {Token} token - The token to modify\n   * @return {Token} new token or the original\n   */\n  protected tokenOverride(token: Token): Token {\n    return token;\n  }\n\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  public format(query: string): string {\n    this.tokens = this.tokenizer().tokenize(query);\n    this.asTokenFactory = new AsTokenFactory(this.cfg.keywordCase, this.tokens);\n    const formattedQuery = this.getFormattedQueryFromTokens();\n    const finalQuery = this.postFormat(formattedQuery);\n\n    return finalQuery.replace(/^\\n*/u, '').trimEnd();\n  }\n\n  /**\n   * Does post-processing on the formatted query.\n   */\n  private postFormat(query: string): string {\n    if (this.cfg.tabulateAlias) {\n      query = formatAliasPositions(query);\n    }\n    if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {\n      query = formatCommaPositions(query, this.cfg);\n    }\n\n    return query;\n  }\n\n  /**\n   * Performs main construction of query from token list, delegates to other methods for formatting based on token criteria\n   */\n  private getFormattedQueryFromTokens(): string {\n    let formattedQuery = '';\n\n    for (this.index = 0; this.index < this.tokens.length; this.index++) {\n      let token = this.tokenOverride(this.tokens[this.index]);\n\n      // if token is a Reserved Keyword, Command, Binary Command, Dependent Clause, Logical Operator\n      if (isReserved(token)) {\n        this.previousReservedToken = token;\n        if (\n          token.type !== TokenType.RESERVED_KEYWORD &&\n          token.type !== TokenType.RESERVED_JOIN_CONDITION\n        ) {\n          // convert Reserved Command or Logical Operator to tabular format if needed\n          token = toTabularToken(token, this.cfg.indentStyle);\n        }\n        if (token.type === TokenType.RESERVED_COMMAND) {\n          this.previousCommandToken = token;\n        }\n      }\n\n      if (token.type === TokenType.LINE_COMMENT) {\n        formattedQuery = this.formatLineComment(token, formattedQuery);\n      } else if (token.type === TokenType.BLOCK_COMMENT) {\n        formattedQuery = this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_COMMAND) {\n        this.currentNewline = this.checkNewline(token);\n        formattedQuery = this.formatCommand(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_BINARY_COMMAND) {\n        formattedQuery = this.formatBinaryCommand(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_DEPENDENT_CLAUSE) {\n        formattedQuery = this.formatDependentClause(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_JOIN_CONDITION) {\n        formattedQuery = this.formatJoinCondition(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_LOGICAL_OPERATOR) {\n        formattedQuery = this.formatLogicalOperator(token, formattedQuery);\n      } else if (token.type === TokenType.RESERVED_KEYWORD) {\n        formattedQuery = this.formatKeyword(token, formattedQuery);\n      } else if (token.type === TokenType.BLOCK_START) {\n        formattedQuery = this.formatBlockStart(token, formattedQuery);\n      } else if (token.type === TokenType.BLOCK_END) {\n        formattedQuery = this.formatBlockEnd(token, formattedQuery);\n      } else if (token.type === TokenType.PLACEHOLDER) {\n        formattedQuery = this.formatPlaceholder(token, formattedQuery);\n      } else if (token.type === TokenType.OPERATOR) {\n        formattedQuery = this.formatOperator(token, formattedQuery);\n      } else {\n        formattedQuery = this.formatWord(token, formattedQuery);\n      }\n    }\n    return replaceTabularPlaceholders(formattedQuery);\n  }\n\n  /**\n   * Formats word tokens + any potential AS tokens for aliases\n   */\n  private formatWord(token: Token, query: string): string {\n    let finalQuery = query;\n    if (this.aliasAs.shouldAddBefore(token)) {\n      finalQuery = this.formatWithSpaces(this.asTokenFactory.token(), finalQuery);\n    }\n\n    finalQuery = this.formatWithSpaces(token, finalQuery);\n\n    if (this.aliasAs.shouldAddAfter()) {\n      finalQuery = this.formatWithSpaces(this.asTokenFactory.token(), finalQuery);\n    }\n\n    return finalQuery;\n  }\n\n  /**\n   * Checks if a newline should currently be inserted\n   */\n  private checkNewline(token: Token): boolean {\n    const nextTokens = this.tokensUntilNextCommandOrQueryEnd();\n\n    // auto break if SELECT includes CASE statements\n    if (this.isWithinSelect() && nextTokens.some(isToken.CASE)) {\n      return true;\n    }\n\n    switch (this.cfg.multilineLists) {\n      case 'always':\n        return true;\n      case 'avoid':\n        return false;\n      case 'expressionWidth':\n        return this.inlineWidth(token, nextTokens) > this.cfg.expressionWidth;\n      default: // multilineLists mode is a number\n        return (\n          this.countClauses(nextTokens) > this.cfg.multilineLists ||\n          this.inlineWidth(token, nextTokens) > this.cfg.expressionWidth\n        );\n    }\n  }\n\n  private inlineWidth(token: Token, tokens: Token[]): number {\n    const tokensString = tokens.map(({ value }) => (value === ',' ? value + ' ' : value)).join('');\n    return `${token.whitespaceBefore}${token.value} ${tokensString}`.length;\n  }\n\n  /**\n   * Counts comma-separated clauses (doesn't count commas inside blocks)\n   * Note: There's always at least one clause.\n   */\n  private countClauses(tokens: Token[]): number {\n    let count = 1;\n    let openBlocks = 0;\n    for (const { type, value } of tokens) {\n      if (value === ',' && openBlocks === 0) {\n        count++;\n      }\n      if (type === TokenType.BLOCK_START) {\n        openBlocks++;\n      }\n      if (type === TokenType.BLOCK_END) {\n        openBlocks--;\n      }\n    }\n    return count;\n  }\n\n  /** get all tokens between current token and next Reserved Command or query end */\n  private tokensUntilNextCommandOrQueryEnd(): Token[] {\n    const tail = this.tokens.slice(this.index + 1);\n    return tail.slice(\n      0,\n      tail.length ? tail.findIndex(token => isCommand(token) || token.value === ';') : undefined\n    );\n  }\n\n  /** Formats a line comment onto query */\n  private formatLineComment(token: Token, query: string): string {\n    return this.addNewline(query + this.show(token));\n  }\n\n  /** Formats a block comment onto query */\n  private formatBlockComment(token: Token, query: string): string {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  }\n\n  /** Aligns comment to current indentation level */\n  private indentComment(comment: string): string {\n    return comment.replace(/\\n[ \\t]*/gu, '\\n' + this.indentation.getIndent() + ' ');\n  }\n\n  /**\n   * Formats a Reserved Command onto query, increasing indentation level where necessary\n   */\n  private formatCommand(token: Token, query: string): string {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    // indent tabular formats, except when preceding a (\n    if (this.isTabularStyle()) {\n      if (this.tokenLookAhead().value !== '(') {\n        this.indentation.increaseTopLevel();\n      }\n    } else {\n      this.indentation.increaseTopLevel();\n    }\n\n    query += this.equalizeWhitespace(this.show(token)); // print token onto query\n    if (this.currentNewline && !this.isTabularStyle()) {\n      query = this.addNewline(query);\n    } else {\n      query += ' ';\n    }\n    return query;\n  }\n\n  /**\n   * Formats a Reserved Binary Command onto query, joining neighbouring tokens\n   */\n  private formatBinaryCommand(token: Token, query: string): string {\n    const isJoin = /JOIN/i.test(token.value); // check if token contains JOIN\n    if (!isJoin || this.isTabularStyle()) {\n      // decrease for boolean set operators or in tabular mode\n      this.indentation.decreaseTopLevel();\n    }\n    query = this.addNewline(query) + this.equalizeWhitespace(this.show(token));\n    return isJoin ? query + ' ' : this.addNewline(query);\n  }\n\n  /**\n   * Formats a Reserved Keyword onto query, skipping AS if disabled\n   */\n  private formatKeyword(token: Token, query: string): string {\n    if (isToken.AS(token) && this.aliasAs.shouldRemove()) {\n      return query;\n    }\n\n    return this.formatWithSpaces(token, query);\n  }\n\n  /**\n   * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it\n   */\n  private formatDependentClause(token: Token, query: string): string {\n    return this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + ' ';\n  }\n\n  // Formats ON and USING keywords\n  private formatJoinCondition(token: Token, query: string): string {\n    return query + this.equalizeWhitespace(this.show(token)) + ' ';\n  }\n\n  /**\n   * Formats an Operator onto query, following rules for specific characters\n   */\n  private formatOperator(token: Token, query: string): string {\n    // special operator\n    if (token.value === ',') {\n      return this.formatComma(token, query);\n    } else if (token.value === ';') {\n      return this.formatQuerySeparator(token, query);\n    } else if (['$', '['].includes(token.value)) {\n      return this.formatWithSpaces(token, query, 'before');\n    } else if ([':', ']'].includes(token.value)) {\n      return this.formatWithSpaces(token, query, 'after');\n    } else if (['.', '{', '}', '`'].includes(token.value)) {\n      return this.formatWithoutSpaces(token, query);\n    }\n\n    // regular operator\n    if (this.cfg.denseOperators && this.tokenLookBehind().type !== TokenType.RESERVED_COMMAND) {\n      // do not trim whitespace if SELECT *\n      return this.formatWithoutSpaces(token, query);\n    }\n    return this.formatWithSpaces(token, query);\n  }\n\n  /**\n   * Formats a Logical Operator onto query, joining boolean conditions\n   */\n  private formatLogicalOperator(token: Token, query: string): string {\n    // ignore AND when BETWEEN x [AND] y\n    if (isToken.AND(token) && isToken.BETWEEN(this.tokenLookBehind(2))) {\n      return this.formatWithSpaces(token, query);\n    }\n\n    if (this.isTabularStyle()) {\n      this.indentation.decreaseTopLevel();\n    }\n\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      return (\n        (this.currentNewline ? this.addNewline(query) : query) +\n        this.equalizeWhitespace(this.show(token)) +\n        ' '\n      );\n    } else {\n      query += this.show(token);\n      return this.currentNewline ? this.addNewline(query) : query;\n    }\n  }\n\n  /** Replace any sequence of whitespace characters with single space */\n  private equalizeWhitespace(string: string): string {\n    return string.replace(/\\s+/gu, ' ');\n  }\n\n  /**\n   * Formats a Block Start token (left paren/bracket/brace, CASE) onto query, beginning an Inline Block or increasing indentation where necessary\n   */\n  private formatBlockStart(token: Token, query: string): string {\n    if (isToken.CASE(token)) {\n      query = this.formatWithSpaces(token, query);\n    } else {\n      // Take out the preceding space unless there was whitespace there in the original query\n      // or another opening parens or line comment\n      const preserveWhitespaceFor = [\n        TokenType.BLOCK_START,\n        TokenType.LINE_COMMENT,\n        TokenType.OPERATOR,\n      ];\n      if (\n        token.whitespaceBefore?.length === 0 &&\n        !preserveWhitespaceFor.includes(this.tokenLookBehind().type)\n      ) {\n        query = trimSpacesEnd(query);\n      } else if (!this.cfg.newlineBeforeOpenParen) {\n        query = query.trimEnd() + ' ';\n      }\n      query += this.show(token);\n      this.inlineBlock.beginIfPossible(this.tokens, this.index);\n    }\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      if (!isToken.CASE(token) || this.cfg.multilineLists === 'always') {\n        query = this.addNewline(query);\n      }\n    }\n    return query;\n  }\n\n  /**\n   * Formats a Block End token (right paren/bracket/brace, END) onto query, closing an Inline Block or decreasing indentation where necessary\n   */\n  private formatBlockEnd(token: Token, query: string): string {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      if (isToken.END(token)) {\n        return this.formatWithSpaces(token, query); // add space before END when closing inline block\n      }\n      return this.formatWithSpaces(token, query, 'after'); // do not add space before )\n    } else {\n      this.indentation.decreaseBlockLevel();\n\n      if (this.isTabularStyle()) {\n        // +1 extra indentation step for the closing paren\n        query = this.addNewline(query) + this.indentation.getSingleIndent();\n      } else if (this.cfg.newlineBeforeCloseParen) {\n        query = this.addNewline(query);\n      } else {\n        query = query.trimEnd() + ' ';\n      }\n\n      return this.formatWithSpaces(token, query);\n    }\n  }\n\n  /**\n   * Formats a Placeholder item onto query, to be replaced with the value of the placeholder\n   */\n  formatPlaceholder(token: Token, query: string): string {\n    return query + this.params.get(token) + ' ';\n  }\n\n  /**\n   * Formats a comma Operator onto query, ending line unless in an Inline Block\n   */\n  private formatComma(token: Token, query: string): string {\n    query = trimSpacesEnd(query) + this.show(token) + ' ';\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (isToken.LIMIT(this.getPreviousReservedToken())) {\n      return query;\n    } else if (this.currentNewline) {\n      return this.addNewline(query);\n    } else {\n      return query;\n    }\n  }\n\n  /** Simple append of token onto query */\n  private formatWithoutSpaces(token: Token, query: string): string {\n    return trimSpacesEnd(query) + this.show(token);\n  }\n\n  /**\n   * Add token onto query with spaces - either before, after, or both\n   */\n  private formatWithSpaces(\n    token: Token,\n    query: string,\n    addSpace: 'before' | 'after' | 'both' = 'both'\n  ): string {\n    const before = addSpace === 'after' ? trimSpacesEnd(query) : query;\n    const after = addSpace === 'before' ? '' : ' ';\n    return before + this.show(token) + after;\n  }\n\n  private formatQuerySeparator(token: Token, query: string): string {\n    this.indentation.resetIndentation();\n    return [\n      trimSpacesEnd(query),\n      this.cfg.newlineBeforeSemicolon ? '\\n' : '',\n      this.show(token),\n      '\\n'.repeat(this.cfg.linesBetweenQueries + 1),\n    ].join('');\n  }\n\n  /** Converts token to string, uppercasing if enabled */\n  private show(token: Token): string {\n    if (\n      isReserved(token) ||\n      token.type === TokenType.BLOCK_START ||\n      token.type === TokenType.BLOCK_END\n    ) {\n      switch (this.cfg.keywordCase) {\n        case 'preserve':\n          return token.value;\n        case 'upper':\n          return token.value.toUpperCase();\n        case 'lower':\n          return token.value.toLowerCase();\n      }\n    } else {\n      return token.value;\n    }\n  }\n\n  /** Inserts a newline onto the query */\n  private addNewline(query: string): string {\n    query = trimSpacesEnd(query);\n    if (!query.endsWith('\\n')) {\n      query += '\\n';\n    }\n    return query + this.indentation.getIndent();\n  }\n\n  private isTabularStyle(): boolean {\n    return this.cfg.indentStyle === 'tabularLeft' || this.cfg.indentStyle === 'tabularRight';\n  }\n\n  /** Returns the latest encountered reserved keyword token */\n  public getPreviousReservedToken(): Token {\n    return this.previousReservedToken;\n  }\n\n  /** True when currently within SELECT command */\n  public isWithinSelect(): boolean {\n    return isToken.SELECT(this.previousCommandToken);\n  }\n\n  /** Fetches nth previous token from the token stream */\n  public tokenLookBehind(n = 1): Token {\n    return this.tokens[this.index - n] || EOF_TOKEN;\n  }\n\n  /** Fetches nth next token from the token stream */\n  public tokenLookAhead(n = 1): Token {\n    return this.tokens[this.index + n] || EOF_TOKEN;\n  }\n}\n"],"file":"Formatter.js"}