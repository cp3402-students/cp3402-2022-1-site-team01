"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = formatCommaPositions;

var _utils = require("../utils");

var _Tokenizer = require("./Tokenizer");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Handles comma placement - either before, after or tabulated
 */
function formatCommaPositions(query, cfg) {
  return groupCommaDelimitedLines(query.split('\n')).flatMap(function (commaLines) {
    if (commaLines.length === 1) {
      return commaLines;
    } else if (cfg.commaPosition === 'tabular') {
      return formatTabular(commaLines);
    } else if (cfg.commaPosition === 'before') {
      return formatBefore(commaLines, cfg);
    } else {
      throw new Error("Unexpected commaPosition: ".concat(cfg.commaPosition));
    }
  }).join('\n');
}
/**
 * Given lines like this:
 *
 *     [
 *       'SELECT',
 *       '  foo,',
 *       '  bar,',
 *       '  baz',
 *       'FROM'
 *     ]
 *
 * Returns groups like this:
 *
 *     [
 *       ['SELECT'],
 *       ['  foo,', '  bar,', '  baz'],
 *       ['FROM']
 *     ]
 */


function groupCommaDelimitedLines(lines) {
  var groups = [];

  for (var i = 0; i < lines.length; i++) {
    var group = [lines[i]]; // when line ends with comma,
    // gather together all following lines that also end with comma,
    // plus one (which doesn't end with comma)

    while (lines[i].match(/.*,$/)) {
      i++;
      group.push(lines[i]);
    }

    groups.push(group);
  }

  return groups;
} // makes all lines the same length by appending spaces before comma


function formatTabular(commaLines) {
  var maxLineLength = (0, _utils.maxLength)(commaLines);
  return trimTrailingCommas(commaLines).map(function (line, i) {
    if (i === commaLines.length - 1) {
      return line; // do not add comma for last item
    }

    return line + ' '.repeat(maxLineLength - line.length - 1) + ',';
  });
}

function formatBefore(commaLines, cfg) {
  return trimTrailingCommas(commaLines).map(function (line, i) {
    if (i === 0) {
      return line; // do not add comma for first item
    }

    var _ref = line.match(_Tokenizer.WHITESPACE_REGEX) || [''],
        _ref2 = _slicedToArray(_ref, 1),
        whitespace = _ref2[0];

    return removeLastIndent(whitespace, cfg.indent) + cfg.indent.replace(/ {2}$/, ', ') + // add comma to the end of last indent
    line.trimStart();
  });
}

function removeLastIndent(whitespace, indent) {
  return whitespace.replace(new RegExp(indent + '$'), '');
}

function trimTrailingCommas(lines) {
  return lines.map(function (line) {
    return line.replace(/,$/, '');
  });
}

module.exports = exports.default;
//# sourceMappingURL=formatCommaPositions.js.map