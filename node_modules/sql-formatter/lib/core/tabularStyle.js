"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceTabularPlaceholders = replaceTabularPlaceholders;
exports.toTabularToken = toTabularToken;

var _token = require("./token");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * When tabular style enabled,
 * produces a 10-char wide version of reserved token.
 *
 * It'll be padded by zero-width space characters
 * instead of normal spaces, so that these spaces will survive
 * trimming of spaces in other parts of formatter.
 * They'll be converted to normal spaces in the end of
 * all the normal formatting with the replaceTabularPlaceholders()
 */
function toTabularToken(token, indentStyle) {
  if (indentStyle === 'standard') {
    return token;
  }

  var bufferItem = token.value; // store which part of keyword receives 10-space buffer

  var tail = []; // rest of keyword

  if (bufferItem.length >= 10 && bufferItem.includes(' ')) {
    // split for long keywords like INNER JOIN or UNION DISTINCT
    var _bufferItem$split = bufferItem.split(' ');

    var _bufferItem$split2 = _toArray(_bufferItem$split);

    bufferItem = _bufferItem$split2[0];
    tail = _bufferItem$split2.slice(1);
  }

  if (indentStyle === 'tabularLeft') {
    bufferItem = bufferItem.padEnd(9, _token.ZWS);
  } else {
    bufferItem = bufferItem.padStart(9, _token.ZWS);
  }

  return _objectSpread(_objectSpread({}, token), {}, {
    value: bufferItem + [''].concat(_toConsumableArray(tail)).join(' ')
  });
}
/**
 * Replaces zero-width-spaces added by the above function
 */


function replaceTabularPlaceholders(query) {
  return query.replace(new RegExp(_token.ZWS, 'ugim'), ' ');
}
//# sourceMappingURL=tabularStyle.js.map