{"version":3,"sources":["../../src/core/Indentation.ts"],"names":["INDENT_TYPE_TOP_LEVEL","INDENT_TYPE_BLOCK_LEVEL","Indentation","indent","repeat","indentTypes","length","push","pop","type"],"mappings":";;;;;;;AAAA;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAG,WAA9B;AACA,IAAMC,uBAAuB,GAAG,aAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBC,W;AAGnB;AACF;AACA;AACE,uBAAoBC,MAApB,EAAoC;AAAA;;AAAA,SAAhBA,MAAgB,GAAhBA,MAAgB;;AAAA,yCALJ,EAKI;AAAE;AAEtC;AACF;AACA;;;;;WACE,2BAA0B;AACxB,aAAO,KAAKA,MAAZ;AACD;AAED;AACF;AACA;AACA;;;;WACE,qBAAoB;AAClB,aAAO,KAAKA,MAAL,CAAYC,MAAZ,CAAmB,KAAKC,WAAL,CAAiBC,MAApC,CAAP;AACD;AAED;AACF;AACA;;;;WACE,4BAAmB;AACjB,WAAKD,WAAL,CAAiBE,IAAjB,CAAsBP,qBAAtB;AACD;AAED;AACF;AACA;;;;WACE,8BAAqB;AACnB,WAAKK,WAAL,CAAiBE,IAAjB,CAAsBN,uBAAtB;AACD;AAED;AACF;AACA;AACA;;;;WACE,4BAAmB;AACjB,UAAI,KAAKI,WAAL,CAAiBC,MAAjB,GAA0B,CAA1B,IAA+B,iBAAK,KAAKD,WAAV,MAA2BL,qBAA9D,EAAqF;AACnF,aAAKK,WAAL,CAAiBG,GAAjB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;;WACE,8BAAqB;AACnB,aAAO,KAAKH,WAAL,CAAiBC,MAAjB,GAA0B,CAAjC,EAAoC;AAClC,YAAMG,IAAI,GAAG,KAAKJ,WAAL,CAAiBG,GAAjB,EAAb;;AACA,YAAIC,IAAI,KAAKT,qBAAb,EAAoC;AAClC;AACD;AACF;AACF;AAED;;;;WACA,4BAAmB;AACjB,WAAKK,WAAL,GAAmB,EAAnB;AACD","sourcesContent":["import { last } from '../utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_COMMAND words\n */\nexport default class Indentation {\n  private indentTypes: string[] = [];\n\n  /**\n   * @param {string} indent A string to indent with\n   */\n  constructor(private indent: string) {}\n\n  /**\n   * Returns indentation string for single indentation step.\n   */\n  getSingleIndent(): string {\n    return this.indent;\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {string} indentation string based on indentTypes\n   */\n  getIndent(): string {\n    return this.indent.repeat(this.indentTypes.length);\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n\n  /** Clears all indentation */\n  resetIndentation() {\n    this.indentTypes = [];\n  }\n}\n"],"file":"Indentation.js"}