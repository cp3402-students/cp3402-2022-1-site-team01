{"version":3,"sources":["../src/sqlFormatter.ts"],"names":["formatters","bigquery","BigQueryFormatter","db2","Db2Formatter","hive","HiveFormatter","mariadb","MariaDbFormatter","mysql","MySqlFormatter","n1ql","N1qlFormatter","plsql","PlSqlFormatter","postgresql","PostgreSqlFormatter","redshift","RedshiftFormatter","spark","SparkSqlFormatter","sql","StandardSqlFormatter","tsql","TSqlFormatter","supportedDialects","Object","keys","defaultOptions","language","indent","keywordCase","indentStyle","multilineLists","logicalOperatorNewline","aliasAs","tabulateAlias","commaPosition","newlineBeforeOpenParen","newlineBeforeCloseParen","expressionWidth","linesBetweenQueries","denseOperators","newlineBeforeSemicolon","format","query","cfg","Error","options","validateConfig","Formatter","includes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;;;;;AAEO,IAAMA,UAAU,GAAG;AACxBC,EAAAA,QAAQ,EAAEC,oBADc;AAExBC,EAAAA,GAAG,EAAEC,cAFmB;AAGxBC,EAAAA,IAAI,EAAEC,gBAHkB;AAIxBC,EAAAA,OAAO,EAAEC,mBAJe;AAKxBC,EAAAA,KAAK,EAAEC,iBALiB;AAMxBC,EAAAA,IAAI,EAAEC,gBANkB;AAOxBC,EAAAA,KAAK,EAAEC,iBAPiB;AAQxBC,EAAAA,UAAU,EAAEC,sBARY;AASxBC,EAAAA,QAAQ,EAAEC,oBATc;AAUxBC,EAAAA,KAAK,EAAEC,oBAViB;AAWxBC,EAAAA,GAAG,EAAEC,uBAXmB;AAYxBC,EAAAA,IAAI,EAAEC;AAZkB,CAAnB;;AAeA,IAAMC,iBAAiB,GAAGC,MAAM,CAACC,IAAP,CAAY3B,UAAZ,CAA1B;;AAIP,IAAM4B,cAA+B,GAAG;AACtCC,EAAAA,QAAQ,EAAE,KAD4B;AAEtCC,EAAAA,MAAM,EAAE,IAF8B;AAGtCC,EAAAA,WAAW,EAAE,UAHyB;AAItCC,EAAAA,WAAW,EAAE,UAJyB;AAKtCC,EAAAA,cAAc,EAAE,QALsB;AAMtCC,EAAAA,sBAAsB,EAAE,QANc;AAOtCC,EAAAA,OAAO,EAAE,UAP6B;AAQtCC,EAAAA,aAAa,EAAE,KARuB;AAStCC,EAAAA,aAAa,EAAE,OATuB;AAUtCC,EAAAA,sBAAsB,EAAE,IAVc;AAWtCC,EAAAA,uBAAuB,EAAE,IAXa;AAYtCC,EAAAA,eAAe,EAAE,EAZqB;AAatCC,EAAAA,mBAAmB,EAAE,CAbiB;AActCC,EAAAA,cAAc,EAAE,KAdsB;AAetCC,EAAAA,sBAAsB,EAAE;AAfc,CAAxC;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAA+D;AAAA,MAA/CC,GAA+C,uEAAf,EAAe;;AACnF,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIE,KAAJ,CAAU,kEAAiEF,KAAjE,CAAV,CAAN;AACD;;AAED,MAAMG,OAAO,GAAGC,cAAc,iCACzBrB,cADyB,GAEzBkB,GAFyB,EAA9B;AAKA,MAAMI,SAAS,GAAGlD,UAAU,CAACgD,OAAO,CAACnB,QAAT,CAA5B;AACA,SAAO,IAAIqB,SAAJ,CAAcF,OAAd,EAAuBJ,MAAvB,CAA8BC,KAA9B,CAAP;AACD,CAZM;;;;AAcP,SAASI,cAAT,CAAwBH,GAAxB,EAA+D;AAC7D,MAAI,CAACrB,iBAAiB,CAAC0B,QAAlB,CAA2BL,GAAG,CAACjB,QAA/B,CAAL,EAA+C;AAC7C,UAAM,IAAIkB,KAAJ,oCAAsCD,GAAG,CAACjB,QAA1C,EAAN;AACD;;AAED,MAAI,qBAASiB,GAAG,CAACb,cAAb,KAAgCa,GAAG,CAACb,cAAJ,IAAsB,CAA1D,EAA6D;AAC3D,UAAM,IAAIc,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAED,MAAID,GAAG,CAACN,eAAJ,IAAuB,CAA3B,EAA8B;AAC5B,UAAM,IAAIO,KAAJ,oEACwDD,GAAG,CAACN,eAD5D,eAAN;AAGD;;AAED,MAAIM,GAAG,CAACT,aAAJ,KAAsB,QAAtB,IAAkCS,GAAG,CAAChB,MAAJ,KAAe,IAArD,EAA2D;AACzD,UAAM,IAAIiB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAED,SAAOD,GAAP;AACD","sourcesContent":["import BigQueryFormatter from './languages/bigquery.formatter';\nimport Db2Formatter from './languages/db2.formatter';\nimport HiveFormatter from './languages/hive.formatter';\nimport MariaDbFormatter from './languages/mariadb.formatter';\nimport MySqlFormatter from './languages/mysql.formatter';\nimport N1qlFormatter from './languages/n1ql.formatter';\nimport PlSqlFormatter from './languages/plsql.formatter';\nimport PostgreSqlFormatter from './languages/postgresql.formatter';\nimport RedshiftFormatter from './languages/redshift.formatter';\nimport SparkSqlFormatter from './languages/sparksql.formatter';\nimport StandardSqlFormatter from './languages/standardsql.formatter';\nimport TSqlFormatter from './languages/tsql.formatter';\n\nimport { FormatOptions } from './types';\nimport { isNumber } from './utils';\n\nexport const formatters = {\n  bigquery: BigQueryFormatter,\n  db2: Db2Formatter,\n  hive: HiveFormatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  spark: SparkSqlFormatter,\n  sql: StandardSqlFormatter,\n  tsql: TSqlFormatter,\n};\nexport type SqlLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nexport type FormatFnOptions = FormatOptions & { language: SqlLanguage };\n\nconst defaultOptions: FormatFnOptions = {\n  language: 'sql',\n  indent: '  ',\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  multilineLists: 'always',\n  logicalOperatorNewline: 'before',\n  aliasAs: 'preserve',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  newlineBeforeOpenParen: true,\n  newlineBeforeCloseParen: true,\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatFnOptions> = {}): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  const Formatter = formatters[options.language];\n  return new Formatter(options).format(query);\n};\n\nfunction validateConfig(cfg: FormatFnOptions): FormatFnOptions {\n  if (!supportedDialects.includes(cfg.language)) {\n    throw new Error(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  if (isNumber(cfg.multilineLists) && cfg.multilineLists <= 0) {\n    throw new Error('multilineLists config must be a positive number.');\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new Error(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.commaPosition === 'before' && cfg.indent === '\\t') {\n    throw new Error('commaPosition: before does not work when tabs are used for indentation.');\n  }\n\n  return cfg;\n}\n\nexport type FormatFn = typeof format;\n"],"file":"sqlFormatter.js"}